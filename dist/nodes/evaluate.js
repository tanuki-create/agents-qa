"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evaluateAnswer = evaluateAnswer;
const google_genai_1 = require("@langchain/google-genai");
const prompts_1 = require("@langchain/core/prompts");
const runnables_1 = require("@langchain/core/runnables");
const output_parsers_1 = require("@langchain/core/output_parsers");
const scoringPrompt = prompts_1.PromptTemplate.fromTemplate(`
‰ª•‰∏ã„ÅÆË≥™Âïè„Å®ÂõûÁ≠î„ÅÆÁµÑ„ÅøÂêà„Çè„Åõ„Å´„Å§„ÅÑ„Å¶„ÄÅ0-100„ÅÆÂ∞∫Â∫¶„ÅßÊ≠£Á¢∫ÊÄß„Å®ÂÆåÂÖ®ÊÄß„ÇíË©ï‰æ°„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
Ë≥™Âïè: {question}
ÂõûÁ≠î: {answer}

Êï∞ÂÄ§„Çπ„Ç≥„Ç¢„ÅÆ„Åø„ÇíÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:
`);
/**
 * ÂõûÁ≠î„ÅÆË≥™„ÇíË©ï‰æ°„Åô„Çã„Éé„Éº„ÉâÈñ¢Êï∞
 * @param state ÁèæÂú®„ÅÆÁä∂ÊÖã
 * @returns Êõ¥Êñ∞„Åï„Çå„ÅüÁä∂ÊÖãÔºàscore„Å®finalAnswer„ÅåË®≠ÂÆö„Åï„Çå„ÇãÂèØËÉΩÊÄß„ÅÇ„ÇäÔºâ
 */
async function evaluateAnswer(state) {
    try {
        console.log('üîç Evaluating answer...');
        if (state.answers.length === 0) {
            console.warn('‚ö†Ô∏è No answers to evaluate');
            return state;
        }
        const model = new google_genai_1.ChatGoogleGenerativeAI({
            apiKey: process.env.GOOGLE_API_KEY || '',
            model: "gemini-2.0-flash",
            maxOutputTokens: 2048,
            temperature: 0.3
        });
        const scoreAnswerChain = runnables_1.RunnableSequence.from([
            scoringPrompt,
            model,
            new output_parsers_1.StringOutputParser(),
            (text) => {
                try {
                    return parseInt(text.trim());
                }
                catch (e) {
                    console.error('‚ùå Failed to parse score:', text);
                    return 0;
                }
            }
        ]);
        const lastAnswer = state.answers[state.answers.length - 1];
        const score = await scoreAnswerChain.invoke({
            question: state.question,
            answer: lastAnswer
        });
        console.log(`‚úÖ Evaluated answer with score: ${score}`);
        // ÊúÄÁµÇÂõûÁ≠î„ÅÆË®≠ÂÆö
        let finalAnswer = null;
        if (score >= 80 || state.iterations >= 3) {
            finalAnswer = lastAnswer;
            console.log('‚úÖ Final answer determined');
        }
        return {
            ...state,
            currentScore: score,
            finalAnswer
        };
    }
    catch (error) {
        console.error('‚ùå Error in evaluateAnswer node:', error);
        throw error;
    }
}
