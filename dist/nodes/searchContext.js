"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchContext = searchContext;
const tavily_search_1 = require("@langchain/community/tools/tavily_search");
/**
 * „Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÊ§úÁ¥¢„Éé„Éº„ÉâÈñ¢Êï∞
 * @param state ÁèæÂú®„ÅÆÁä∂ÊÖã
 * @returns Êõ¥Êñ∞„Åï„Çå„ÅüÁä∂ÊÖãÔºàcontext„ÅåËøΩÂä†„Åï„Çå„ÇãÔºâ
 */
async function searchContext(state) {
    try {
        if (!state.question) {
            console.warn('‚ö†Ô∏è Question not found for search');
            return state;
        }
        console.log('üîç Searching context for question:', state.question);
        // API„Ç≠„Éº„ÅÆÁ¢∫Ë™ç
        if (!process.env.TAVILY_API_KEY) {
            console.error('‚ùå TAVILY_API_KEY not found in environment');
            throw new Error('TAVILY_API_KEY not found');
        }
        // TavilyÊ§úÁ¥¢„Çí‰ΩøÁî®
        const search = new tavily_search_1.TavilySearchResults({
            apiKey: process.env.TAVILY_API_KEY,
            maxResults: 3
        });
        const searchResults = await search.invoke({
            query: state.question
        });
        // ÁµêÊûú„Çí„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´Â§âÊèõ
        const context = searchResults.map((result, index) => (`[${index + 1}] ${result.title || 'No Title'}\n${result.content}\nSource: ${result.url}`)).join('\n\n');
        console.log('‚úÖ Found context');
        return {
            ...state,
            context
        };
    }
    catch (error) {
        console.error('‚ùå Error in searchContext node:', error);
        throw error;
    }
}
